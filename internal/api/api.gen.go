// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Session defines model for Session.
type Session struct {
	// The session ID
	Uuid *string `json:"uuid,omitempty"`
}

// Slice defines model for Slice.
type Slice struct {
	Elapsed *time.Time `json:"elapsed,omitempty"`
	End     *time.Time `json:"end,omitempty"`
	Label   *string    `json:"label,omitempty"`
	Start   *time.Time `json:"start,omitempty"`
	Uuid    *string    `json:"uuid,omitempty"`
}

// Time slices
type Slices []Slice

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetSessions request
	GetSessions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSessionsUuidSlicesActive request
	GetSessionsUuidSlicesActive(ctx context.Context, uuid Session, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSessionsUuidSlicesElapsed request
	GetSessionsUuidSlicesElapsed(ctx context.Context, uuid Session, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetSessions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSessionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSessionsUuidSlicesActive(ctx context.Context, uuid Session, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSessionsUuidSlicesActiveRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSessionsUuidSlicesElapsed(ctx context.Context, uuid Session, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSessionsUuidSlicesElapsedRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetSessionsRequest generates requests for GetSessions
func NewGetSessionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sessions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSessionsUuidSlicesActiveRequest generates requests for GetSessionsUuidSlicesActive
func NewGetSessionsUuidSlicesActiveRequest(server string, uuid Session) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sessions/%s/slices/active", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSessionsUuidSlicesElapsedRequest generates requests for GetSessionsUuidSlicesElapsed
func NewGetSessionsUuidSlicesElapsedRequest(server string, uuid Session) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sessions/%s/slices/elapsed", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetSessions request
	GetSessionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSessionsResponse, error)

	// GetSessionsUuidSlicesActive request
	GetSessionsUuidSlicesActiveWithResponse(ctx context.Context, uuid Session, reqEditors ...RequestEditorFn) (*GetSessionsUuidSlicesActiveResponse, error)

	// GetSessionsUuidSlicesElapsed request
	GetSessionsUuidSlicesElapsedWithResponse(ctx context.Context, uuid Session, reqEditors ...RequestEditorFn) (*GetSessionsUuidSlicesElapsedResponse, error)
}

type GetSessionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Session
}

// Status returns HTTPResponse.Status
func (r GetSessionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSessionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSessionsUuidSlicesActiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Slices
}

// Status returns HTTPResponse.Status
func (r GetSessionsUuidSlicesActiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSessionsUuidSlicesActiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSessionsUuidSlicesElapsedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Slices
}

// Status returns HTTPResponse.Status
func (r GetSessionsUuidSlicesElapsedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSessionsUuidSlicesElapsedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetSessionsWithResponse request returning *GetSessionsResponse
func (c *ClientWithResponses) GetSessionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSessionsResponse, error) {
	rsp, err := c.GetSessions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSessionsResponse(rsp)
}

// GetSessionsUuidSlicesActiveWithResponse request returning *GetSessionsUuidSlicesActiveResponse
func (c *ClientWithResponses) GetSessionsUuidSlicesActiveWithResponse(ctx context.Context, uuid Session, reqEditors ...RequestEditorFn) (*GetSessionsUuidSlicesActiveResponse, error) {
	rsp, err := c.GetSessionsUuidSlicesActive(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSessionsUuidSlicesActiveResponse(rsp)
}

// GetSessionsUuidSlicesElapsedWithResponse request returning *GetSessionsUuidSlicesElapsedResponse
func (c *ClientWithResponses) GetSessionsUuidSlicesElapsedWithResponse(ctx context.Context, uuid Session, reqEditors ...RequestEditorFn) (*GetSessionsUuidSlicesElapsedResponse, error) {
	rsp, err := c.GetSessionsUuidSlicesElapsed(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSessionsUuidSlicesElapsedResponse(rsp)
}

// ParseGetSessionsResponse parses an HTTP response from a GetSessionsWithResponse call
func ParseGetSessionsResponse(rsp *http.Response) (*GetSessionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSessionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Session
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSessionsUuidSlicesActiveResponse parses an HTTP response from a GetSessionsUuidSlicesActiveWithResponse call
func ParseGetSessionsUuidSlicesActiveResponse(rsp *http.Response) (*GetSessionsUuidSlicesActiveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSessionsUuidSlicesActiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Slices
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSessionsUuidSlicesElapsedResponse parses an HTTP response from a GetSessionsUuidSlicesElapsedWithResponse call
func ParseGetSessionsUuidSlicesElapsedResponse(rsp *http.Response) (*GetSessionsUuidSlicesElapsedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSessionsUuidSlicesElapsedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Slices
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all sessions
	// (GET /sessions)
	GetSessions(ctx echo.Context) error
	// List information about the currently active time slice in a session
	// (GET /sessions/{uuid}/slices/active)
	GetSessionsUuidSlicesActive(ctx echo.Context, uuid Session) error
	// List information about elapsed time slices in a session
	// (GET /sessions/{uuid}/slices/elapsed)
	GetSessionsUuidSlicesElapsed(ctx echo.Context, uuid Session) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetSessions converts echo context to params.
func (w *ServerInterfaceWrapper) GetSessions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSessions(ctx)
	return err
}

// GetSessionsUuidSlicesActive converts echo context to params.
func (w *ServerInterfaceWrapper) GetSessionsUuidSlicesActive(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid Session

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, ctx.Param("uuid"), &uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSessionsUuidSlicesActive(ctx, uuid)
	return err
}

// GetSessionsUuidSlicesElapsed converts echo context to params.
func (w *ServerInterfaceWrapper) GetSessionsUuidSlicesElapsed(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid Session

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, ctx.Param("uuid"), &uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSessionsUuidSlicesElapsed(ctx, uuid)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/sessions", wrapper.GetSessions)
	router.GET(baseURL+"/sessions/:uuid/slices/active", wrapper.GetSessionsUuidSlicesActive)
	router.GET(baseURL+"/sessions/:uuid/slices/elapsed", wrapper.GetSessionsUuidSlicesElapsed)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xVwW7bRhD9lcW0QC+sVm5vvBmtUQh1GyNyToEPQ3Ikjk3uMrNDGYKhfw92V5KVSLHl",
	"ALnlRIo7+2bmvTejJ6h9P3hHTgOUTxDqlnpMr3MKgb2Lr4P4gUSZ0sE4chOfDYVaeNAUBLctmZCvmNnf",
	"UMDCS48KZY4vQNcDQQlBhd0SNpv9F1/dU62wKWDecU3HCanDIVDKuQdtUOl35Z6OkQsg94bgDivqYvjR",
	"SVAUPR9ox8v3Nh5OkMo9mZAPC2ClPgX9KrSAEn6xz+LZrXI2c/icBEVwDZuYlt3CnxKOg+FgtCVzeTMz",
	"Cy/mPbuaHtnF8iOeC0kWh32E/G92CwWM0kEJreoQSmuXrO1YTWrf2wd6CLVvyMoOxVadr2yP7Oz17K+r",
	"/+dXqUDWLsLtk8X0UMCKJBsPppPp5CKG+oEcDgwl/DmZTqZQwIDaJi7s1nTpx5L0uMFrDmqw64yMzrFb",
	"mv2NBCwY42YNlPAP6fz5TCgM3oWsyx/TaXzU3im5lASHoeM6Xbb3IQ9KFuFVibaTlUT5stZ3/yaDhLHv",
	"UdaHxR8UrbgMUH6E7Se4i1f2PNin6LuNzbaxWCuv6JvkXDqTI7LNohF2NAkvWzXOPxp0jWH9LZgGFU2P",
	"a1O36JZkIh3s/Bi69Utkfhi5yRa/zNVE/QR7UpLYyddFzQ/3CMcvUW4odgbcDpbQp5ElLgaVkYo3s3/3",
	"IzXOQ3u2xHE249qIbWPlR03zWI8i5LRb70TS/UIw7AzuXHFoijT/L1riYJ+e9MRVPj9IFozQIBTIqWk5",
	"qBeukxnOU30L+FP2M2SnE+S/JnXEJVntWM2b2cZVisJYdbnPCgPdREKT4Ascu/gnZVcXsdy7zecAAAD/",
	"/4989NALCAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
